#+STARTUP: hidestars

* General
    General configuration of emacs
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-face-attribute 'default nil :height 100)

    (setq-default tab-width 4)

    ;; Line numbers
    (setq-default display-line-numbers t)

    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# files

    ;; Enable the use of alt on mac
    (when (memq window-system '(mac ns))
        (setq mac-option-modifier nil
        mac-command-modifier 'meta
        x-select-enable-clipboard t))
    #+END_SRC

* Themes
    Installing and loading themes
    #+BEGIN_SRC emacs-lisp
    (use-package atom-one-dark-theme
        :ensure t)

    (use-package doom-themes
        :ensure t)

    (use-package dracula-theme
        :ensure t)

    (use-package gruvbox-theme
        :ensure t)

    (load-theme 'gruvbox-dark-medium t)
    #+END_SRC

* Try
    Try configuration
    #+BEGIN_SRC emacs-lisp
        (use-package try
            :ensure t)
    #+END_SRC

* Which-key
    Which key configuration
    #+BEGIN_SRC emacs-lisp
        (use-package which-key
            :ensure t
            :config (which-key-mode))
    #+END_SRC

* Path from shell
    Gets the path variable from the shell (Important for mac users)
    #+BEGIN_SRC emacs-lisp
        (use-package exec-path-from-shell
            :ensure t
            :config
            (when (memq window-system '(mac ns x)) ;; Only use on mac os
                (exec-path-from-shell-initialize)))
    #+END_SRC

* Async
    Async configuration
    #+BEGIN_SRC emacs-lisp
        (use-package async
            :ensure t)
    #+END_SRC

* Ace-window (Switching windows)
    Ace window configuration
    #+BEGIN_SRC emacs-lisp
        (use-package ace-window
            :ensure t
            :init
            (global-set-key [remap other-window] 'ace-window))
    #+END_SRC

* Powerline
    Powerline configuration
    #+BEGIN_SRC emacs-lisp
        ;; sRGB doesn't blend with Powerline's pixmap colors, but is only
        ;; used in OS X. Disable sRGB before setting up Powerline.
        (when (memq window-system '(mac ns))
            (setq ns-use-srgb-colorspace nil))

        (use-package powerline
            :ensure t)

        ;; Vim mode indicator
        (use-package powerline-evil
            :ensure t)

        (load "~/.emacs.d/init/powerline")
        (require 'powerline)

        ;; Set custom evil mode background color of indicator
        (custom-set-faces
         '(powerline-evil-normal-face ((t (:background "#35940F" :foreground "#eee8d5"))))
         '(powerline-evil-insert-face ((t (:background "#268bd2" :foreground "#eee8d5"))))
         '(powerline-evil-visual-face ((t (:background "#cb4b16" :foreground "#eee8d5"))))
         '(powerline-evil-operator-face ((t (:background "#2aa198" :foreground "#eee8d5"))))
         '(powerline-evil-replace-face ((t (:background "#dc322f" :foreground "#eee8d5"))))
         '(powerline-evil-motion-face ((t (:background "#d33682" :foreground "#eee8d5"))))
         '(powerline-evil-emacs-face ((t (:background "#6c71c4" :foreground "#eee8d5")))))

         (air--powerline-default-theme)
    #+END_SRC

* Projectile
    Projectile configuration
    #+BEGIN_SRC emacs-lisp
    (use-package projectile
        :ensure t
        :config
        (projectile-global-mode +1)
        (setq projectile-completion-system 'helm)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
    #+END_SRC

* Helm
    Helm configuration
    #+BEGIN_SRC emacs-lisp
    (use-package helm
        :ensure t
        :config
        (require 'helm-config)
        (global-set-key (kbd "C-x C-f") #'helm-find-files)
        (global-set-key (kbd "C-x b") #'helm-buffers-list)
        (helm-mode 1))

    (use-package helm-projectile
        :ensure t
        :config (helm-projectile-on))

    (use-package helm-ag
        :ensure t)
    #+END_SRC

* Smartparens
    Smartparens configuration
    #+BEGIN_SRC emacs-lisp
        (use-package smartparens
            :ensure t
            :config
            (require 'smartparens-config)
            (smartparens-global-mode t))
    #+END_SRC


* Org-mode
    Org mode configuration
    #+BEGIN_SRC emacs-lisp
        (use-package org
            :ensure t)

        (use-package org-bullets
            :ensure t
            :config
            (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

* Evil-mode
    Evil mode configuration
    #+BEGIN_SRC emacs-lisp
    (use-package evil
        :ensure t
        :config
        (evil-mode))

    ;; Unbind keys used as "go to definition" from evil mode
    (eval-after-load "evil-maps"
        (define-key evil-normal-state-map "\M-." nil))
    (eval-after-load "evil-maps"
        (define-key evil-normal-state-map "\M-," nil))

    (use-package evil-surround
        :ensure t
        :config (global-evil-surround-mode 1))

    (use-package evil-commentary
        :ensure t
        :config (evil-commentary-mode))
    #+END_SRC

* Web-mode
    Web mode configuration
    #+BEGIN_SRC emacs-lisp
    (use-package web-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
        (setq web-mode-markup-indent-offset 4)
        (setq web-mode-css-indent-offset 4)
        (setq web-mode-code-indent-offset 4)
        (setq web-mode-script-padding 4)
        (setq web-mode-style-padding 4)
        (setq web-mode-block-padding 4))
    #+END_SRC

* Markdown-mode
    Markdown mode configuration
    #+BEGIN_SRC emacs-lisp
        (use-package markdown-mode
            :ensure t
            :mode
            (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
            :init (setq markdown-command "multimarkdown"))
    #+END_SRC

* Emmet
    Emmet configuration
    #+BEGIN_SRC emacs-lisp
        (use-package emmet-mode
            :ensure t
            :config
            (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
            (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
            (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
    #+END_SRC

* Magit (Git)
    Magit configuration
    #+BEGIN_SRC emacs-lisp
        (use-package magit
            :ensure t
            :init (progn (bind-key "C-x g" 'magit-status)))
    #+END_SRC


* Company (Autocomplete frontend)
    Auto complete configuration
    #+BEGIN_SRC emacs-lisp
    (use-package company
        :ensure t
        :config
        (add-hook 'after-init-hook 'global-company-mode)
        (add-to-list 'company-backends 'company-yasnippet)
        (setq company-minimum-prefix-length 3)
        (setq company-idle-delay 0)
        (global-set-key (kbd  "C-SPC") 'company-complete))
    #+END_SRC

* YASnippet
    YASnippet configuration
    #+BEGIN_SRC emacs-lisp
    ;; Engine
    (use-package yasnippet
     :ensure t
     :init (yas-global-mode 1))

    ;; Snippets
    (use-package yasnippet-snippets
        :ensure t)

    ;; Solves tab conflcit between yasnippet and company
    (defun company-yasnippet-or-completion ()
        "Solve company yasnippet conflicts."
        (interactive)
        (let ((yas-fallback-behavior
             (apply 'company-complete-common nil)))
        (yas-expand)))

    (add-hook 'company-mode-hook
                (lambda ()
                (substitute-key-definition
                 'company-complete-common
                 'company-yasnippet-or-completion
                 company-active-map)))
    #+END_SRC

* Flycheck
    Flycheck configuration
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck
        :ensure t
        :init (global-flycheck-mode t)
        (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11"))))
    #+END_SRC

* Tern (Javascript)
    Tern configuration
    #+BEGIN_SRC emacs-lisp
    (use-package tern
        :config
        (add-hook 'js2-mode-hook 'tern-mode)
        (add-hook 'web-mode-hook 'tern-mode)
        (setq tern-command (append tern-command '("--no-port-file"))))

    (use-package company-tern
        :ensure t
        :config (add-to-list 'company-backends 'company-tern))
    #+END_SRC
* YCMD (Autocompletion)
    #+BEGIN_SRC emacs-lisp
    (use-package ycmd
        :ensure t
        :config
        (add-hook 'after-init-hook #'global-ycmd-mode)
        (set-variable 'ycmd-server-command `("python" ,(file-truename "~/.emacs.d/ycmd/ycmd/")))
        (set-variable 'ycmd-global-config (file-truename "~/.emacs.d/ycmd_global_conf.py")))

    (use-package company-ycmd
        :ensure t
        :config (company-ycmd-setup))
    #+END_SRC


* Neotree
    Neotree configuration
    #+BEGIN_SRC emacs-lisp
        (use-package neotree
            :ensure t
            :config (global-set-key [f8] 'neotree-toggle))
    #+END_SRC

* Reveal.js (Presentations)
    Reveal.js configuration
    #+BEGIN_SRC emacs-lisp
    ;; (use-package ox-reveal
    ;;   :ensure ox-reveal)

    ;; (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.6.0")
    ;; (setq org-reveal-mathjax t)

    ;; (use-package htmlize
    ;;   :ensure t)
    #+END_SRC


* Irony
    Irony configuration
    #+BEGIN_SRC emacs-lisp
    ;; (use-package company-irony
    ;;   :ensure t
    ;;   :config
    ;;   (add-to-list 'company-backends 'company-irony))

    ;; (use-package irony
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'c++-mode-hook 'irony-mode)
    ;;   (add-hook 'c-mode-hook 'irony-mode)
    ;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

    ;; (use-package irony-eldoc
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'irony-mode-hook #'irony-eldoc))
    #+END_SRC

* Elpy (Python)
    Elpy configuration
    #+BEGIN_SRC emacs-lisp
    ;; (use-package elpy
    ;;   :ensure t
    ;;   :config
    ;;   (elpy-enable)
    ;;   (remove-hook 'elpy-modules 'elpy-module-flymake))
    #+END_SRC

